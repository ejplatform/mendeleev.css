$MENDELEEV_COLORS: () !default;
$MENDELEEV_CONTRAST: () !default;
$MENDELEEV_VARIANTS: () !default;

// Register variants for all colors
@function _color-register-variants() {
    $variants: config('color.variants.color');
    $colors: null;
    $result: null;
    $contrast: null;

    // Fetch dark and light text colors
    $cfg: config('color.variants.text.light');
    $light-text: color(nth($cfg, 1));
    $light-mix: nth($cfg, 2);

    $cfg: config('color.variants.text.dark');
    $dark-text: color(nth($cfg, 1));
    $dark-mix: nth($cfg, 2);

    // Loop over all variants and register color values
    @each $name in config('color.roles.variants') {
        $bias: config('color.contrast-bias');
        $color: map-read($MENDELEEV_COLORS, $name);
        $registered: ();

        // We construct the light and dark values for the current color
        $light: mix($light-text, $color, $light-mix);
        $dark: mix($dark-text, $color, $dark-mix);

        // Compute the best contrast color for base color
        $contrast-value: choose-contrast-color($color, $light, $dark, $bias);
        $contrast: cons($color $contrast-value, $contrast);

        @each $variation, $cfg in $variants {
            // Try to fetch value from color dictionary
            $full-name: #{$name}-#{$variation};
            $value: map-get($MENDELEEV_COLORS, $full-name);

            // If value is not given, compute it explicitly
            @if $value == null {
                $base: color(nth($cfg, 1));
                $mix: nth($cfg, 2);
                $value: mix($base, $color, $mix);
            }

            // Compute the best contrast color
            $contrast-value: choose-contrast-color($value, $light, $dark, $bias);
            $contrast: cons($value $contrast-value, $contrast);

            // Register color in global color dictionary and in the palette
            $colors: cons($full-name $value, $colors);
            $registered: map-merge($registered, ($variation: $value));
        }
        $result: cons(($name $registered), $result);
    }
    $MENDELEEV_COLORS: map-merge(link-to-map($colors), $MENDELEEV_COLORS) !global;
    $MENDELEEV_CONTRAST: map-merge(link-to-map($contrast), $MENDELEEV_CONTRAST) !global;
    @return link-to-map($result);
}

// Register contrasts for all colors
@function _color-register-contrasts() {
    // Bias
    $bias: config('color.contrast-bias');

    // Light and dark text color
    $light: color(nth(config('color.variants.text.light'), 1));
    $dark: color(nth(config('color.variants.text.dark'), 1));

    $colors: null;
    @each $name, $color in $MENDELEEV_COLORS {
        @if not map-has-key($MENDELEEV_CONTRAST, $color) {
            $contrast: choose-contrast-color($color, $light, $dark, $bias);
            $colors: cons(($color $contrast), $colors);
        }
    }

    // Register all colors
    @return link-to-map($colors);
}

//------------------------------------------------------------------------------
// SETUP GLOBAL MAPPINGS ONLY ONCE
//------------------------------------------------------------------------------

@if not global-variable-exists(MENDELEEV_REGISTRY_SETUP) {
    // Include all registered palette colors, contrasts and variants
    $MENDELEEV_COLORS: map-merge($MENDELEEV_COLORS, config('palette', $merge: true));
    $MENDELEEV_CONTRAST: map-merge($MENDELEEV_CONTRAST, config('contrast', $merge: true));
    $MENDELEEV_CONTRAST: map-merge(_color-register-contrasts(), $MENDELEEV_CONTRAST);
    $MENDELEEV_VARIANTS: map-merge-nested(_color-register-variants(), $MENDELEEV_VARIANTS);
}

$MENDELEEV_REGISTRY_SETUP: true;
