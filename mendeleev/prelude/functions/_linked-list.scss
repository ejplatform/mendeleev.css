////////////////////////////////////////////////////////////////////////////////
/// LINKED LIST FOR MORE EFFICIENT STRUCTURAL SHARING
/// @group linked list
/// @author Fábio Macêdo Mendes
////////////////////////////////////////////////////////////////////////////////

/// Returns head element of linked list
@function car($lst) {
    @return nth($lst, 1);
}

/// Returns tail element of linked list
@function cdr($lst) {
    @return nth($lst, 2);
}

/// Construct list
@function cons($x, $tail: null) {
    @return ($x $tail);
}

/// Reverse linked list
@function link-reverse($lst) {
    $result: null;
    @while $lst != null {
        $head: nth($lst, 1); // car
        $lst: nth($lst, 2); // cdr
        $result: ($head $result);
    }
    @return $result;
}

/// Create linked list from standard lists/array
@function linked-list($arr) {
    $lst: null;
    @each $x in $arr {
        $lst: ($x $lst);
    }
    @return link-reverse($lst);
}

/// Transform linked list into standard list
@function link-to-list($lst) {
    @if $lst == null {
        @return ();
    }

    // Collect partial sub-arrays
    $partials: ();
    @while $lst != null {
        $arr: (nth($lst, 1),);
        $lst: nth($lst, 2);
        @if $lst != null {
            $arr: append($arr, nth($lst, 1));
            $lst: nth($lst, 2);
            @if $lst != null {
                $arr: append($arr, nth($lst, 1));
                $lst: nth($lst, 2);
                @if $lst != null {
                    $arr: append($arr, nth($lst, 1));
                    $lst: nth($lst, 2);
                    @if $lst != null {
                        $arr: append($arr, nth($lst, 1));
                        $lst: nth($lst, 2);
                    }
                }
            }
        }
        $partials: append($partials, $arr);
    }

    // Join partials
    @while length($partials) > 1 {
        $new-partials: ();
        @for $i from 0 to floor(length($partials) / 2) {
            $j: 2 * $i + 1;
            $a: nth($partials, $j);
            $b: nth($partials, $j + 1);
            $new-partials: append($new-partials, join($a, $b));
        }
        $partials: $new-partials;
    }
    @return nth($partials, 1);
}

/// Transform linked list of pairs of values into maps
@function link-to-map($lst) {
    @if $lst == null {
        @return ();
    }

    // Collect partial sub-arrays
    $partials: ();
    @while $lst != null {
        $item: nth($lst, 1);
        $arr: (nth($item, 1): nth($item, 2));
        $lst: nth($lst, 2);
        @if $lst != null {
            $item: nth($lst, 1);
            $arr: map-merge($arr, (nth($item, 1): nth($item, 2)));
            $lst: nth($lst, 2);
            @if $lst != null {
                $item: nth($lst, 1);
                $arr: map-merge($arr, (nth($item, 1): nth($item, 2)));
                $lst: nth($lst, 2);
                @if $lst != null {
                    $item: nth($lst, 1);
                    $arr: map-merge($arr, (nth($item, 1): nth($item, 2)));
                    $lst: nth($lst, 2);
                    @if $lst != null {
                        $item: nth($lst, 1);
                        $arr: map-merge($arr, (nth($item, 1): nth($item, 2)));
                        $lst: nth($lst, 2);
                    }
                }
            }
        }
        $partials: append($partials, $arr);
    }

    // Join partials
    @while length($partials) > 1 {
        $new-partials: ();
        @for $i from 0 to floor(length($partials) / 2) {
            $j: 2 * $i + 1;
            $a: nth($partials, $j);
            $b: nth($partials, $j + 1);
            $new-partials: append($new-partials, map-merge($a, $b));
        }
        $partials: $new-partials;
    }
    @return nth($partials, 1);
}


