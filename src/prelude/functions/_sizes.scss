////////////////////////////////////////////////////////////////////////////////
/// MANIPULATE SIZES
/// @group sizing
/// @author Fábio Macêdo Mendes
////////////////////////////////////////////////////////////////////////////////

@import '../../config';

$mendeleev-unit-less-size-scale: (
    '0': 0,
    '0p': 0.125,
    '-0': 0,
    '-0p': -0.125,
    '1': 0.25,
    '1p': 0.375,
    '-1': -0.25,
    '-1p': -0.375,
    '2': 0.5,
    '2p': 0.75,
    '-2': -0.5,
    '-2p': -0.75,
    '3': 1,
    '3p': 1.5,
    '-3': -1,
    '-3p': -1.5,
    '4': 2,
    '4p': 3,
    '-4': -2,
    '-4p': -3,
    '5': 4,
    '5p': 6,
    '-5': -4,
    '-5p': -6,
    '6': 8,
    '6p': 12,
    '-6': -8,
    '-6p': -12,
    '7': 16,
    '7p': 24,
    '-7': -16,
    '-7p': -24,
    '8': 32,
    '8p': 48,
    '-8': -32,
    '-8p': -48,
    '9': 64,
    '9p': 96,
    '-9': -64,
    '-9p': -96,
    '10': 128,
    '10p': 192,
    '-10': -128,
    '-10p': -192,
    '11': 256,
    '11p': 384,
    '-11': -256,
    '-11p': -384,
    '12': 512,
    '12p': 768,
    '-12': -512,
    '-12p': -768,
    '13': 1024,
    '13p': 1536,
    '-13': -1024,
    '-13p': -1536,
);
$mendeleev-unit-size: config('typography.lead', 1.5) * 1rem !default;

$mendeleev-numeric-size-scale: (
    0: 0,
    1: 0.25,
    2: 0.5,
    3: 1,
    4: 2,
    5: 4,
    6: 8,
    7: 16,
    8: 32,
    9: 64,
    10: 128,
    11: 256,
    12: 512,
    13: 1024,
);

//------------------------------------------------------------------------------
// Utility functions
//------------------------------------------------------------------------------

///  Convert value to a unit on the size scale.
///
/// @arg $x - input value
@function size-scale($x) {
    @if type-of($x) == number {
        @if unit($x) != '' {
            @error 'Only unitless numbers are valid size scales.'
        }
        $s: sign($x);
        $v: abs($x);
        $size: map-get($mendeleev-numeric-size-scale, $v);
        $size: if($size == null, pow(2, abs($x) - 3), $size);
        @return $s * $size * $mendeleev-unit-size;
    } @else if type-of($x) == string {
        $x: map-get($mendeleev-unit-less-size-scale, $x);
        @if $x == null {
            @error 'Invalid size #{$x}.';
        }
        @return size-scale($x);
    } @else if $x == null {
        @return null;

    } @else {
        @error 'Invalid size #{$x}.';
    }
}

/// Convert number to sizing by multiplying it by lead * 1rem
@function size($x) {
    @if type-of($x) == number and unit($x) == '' {
        @return $x * $mendeleev-unit-size;
    }
    @return $x;
}

/// Return a map with sizing values for the given property.
@function sizing($property, $value) {
    @if type-of($value) == number or type-of($value) == string {
        @return ($property: size($value));
    } @else if type-of($value) == list {
        @return ($property: list-apply($value, size));
    } @else if type-of($value) == map {
        @return map-apply-values(map-filter-values((
            #{$property}-left: map-get-first($value, L(left, l, x, horizontal, all)),
            #{$property}-right: map-get-first($value, L(right, r, x, horizontal, all)),
            #{$property}-top: map-get-first($value, L(top, t, y, vertical, all)),
            #{$property}-bottom: map-get-first($value, L(bottom, b, y, vertical, all)),
        ), not-null), size);
    } @else {
        @return ($property: $value);
    }
}

@function sizing-scale($property, $value) {
    @if type-of($value) == number or type-of($value) == string {
        @return ($property: size-scale($value));
    } @else if type-of($value) == list {
        @return ($property: list-apply($value, size));
    } @else if type-of($value) == map {
        @return map-apply-values(map-filter-values((
            #{$property}-left: map-get-first($value, left l x horizontal all, null),
            #{$property}-right: map-get-first($value, right r x horizontal all, null),
            #{$property}-top: map-get-first($value, top t y vertical all, null),
            #{$property}-bottom: map-get-first($value, bottom b y vertical all, null),
        ), not-null), size-scale);
    } @else {
        @return ($property: $value);
    }
}

