////////////////////////////////////////////////////////////////////////////////
/// MANIPULATE SIZES
/// @group sizing
/// @author Fábio Macêdo Mendes
////////////////////////////////////////////////////////////////////////////////
@import '../../constants';

//------------------------------------------------------------------------------
// Utility functions
//------------------------------------------------------------------------------

///  Convert value to a unit on the size scale.
///
/// @arg $x - input value
@function size-scale($x) {
    @if type-of($x) == number {
        @if unit($x) != '' {
            @error 'Only unitless numbers are valid size scales.'
        }
        $s: sign($x);
        $v: abs($x);
        $size: map-get($mendeleev-size-scale-numeric, $v);
        $size: if($size == null, pow(2, abs($x) - 3), $size);
        @return $s * $size * $mendeleev-unit-size;
    } @else if type-of($x) == string {
        $x: map-get($mendeleev-size-scale, $x);
        @if $x == null {
            @error 'Invalid size #{$x}.';
        }
        @return size-scale($x);
    } @else if $x == null {
        @return null;
    } @else {
        @error 'Invalid size #{$x}.';
    }
}

/// Convert unitless number to size by multiplying it by lead * 1rem.
@function size($x) {
    @if type-of($x) == number and unit($x) == '' {
        @return $x * $mendeleev-unit-size;
    }
    @return $x;
}

/// Return a map with sizing values for the given property.
@function sizing($property, $value) {
    @if type-of($value) == number or type-of($value) == string {
        @return ($property: size($value));
    } @else if type-of($value) == list {
        @return ($property: array-map(size, $value));
    } @else if type-of($value) == map {
        @return map-apply-values(map-filter-values((
            #{$property}-left: map-get-first($value, L(left, l, x, horizontal, all)),
            #{$property}-right: map-get-first($value, L(right, r, x, horizontal, all)),
            #{$property}-top: map-get-first($value, L(top, t, y, vertical, all)),
            #{$property}-bottom: map-get-first($value, L(bottom, b, y, vertical, all)),
        ), not-null), size);
    } @else {
        @return ($property: $value);
    }
}

@function sizing-scale($property, $value) {
    @if type-of($value) == number or type-of($value) == string {
        @return ($property: size-scale($value));
    } @else if type-of($value) == list {
        @return ($property: array-map(size-scale, $value));
    } @else if type-of($value) == map {
        @return map-apply-values(map-filter-values((
            #{$property}-left: map-get-first($value, left l x horizontal all, null),
            #{$property}-right: map-get-first($value, right r x horizontal all, null),
            #{$property}-top: map-get-first($value, top t y vertical all, null),
            #{$property}-bottom: map-get-first($value, bottom b y vertical all, null),
        ), not-null), size-scale);
    } @else {
        @return ($property: $value);
    }
}

