////////////////////////////////////////////////////////////////////////////////
/// MANIPULATE SIZES
/// @group sizing
/// @author Fábio Macêdo Mendes
////////////////////////////////////////////////////////////////////////////////

$_DIGITS: ('0', '1', '2', '3', '4', '5', '6', '7', '8', '9');
$_mendeleev-size-scale: (
    '0': 0,
    '1': 0.25,
    '1p': 0.375,
    '2': 0.5,
    '2p': 0.75,
    '3': 1,
    '3p': 1.5,
    '4': 2,
    '4p': 3,
    '5': 4,
    '5p': 6,
    '6': 8,
    '6p': 12,
    '7': 16,
    '7p': 24,
    '8': 32,
    '8p': 48,
    '9': 64,
    '9p': 96,
    '10': 128,
    '10p': 192,
);

//------------------------------------------------------------------------------
// Utility functions
//------------------------------------------------------------------------------

///  Convert value to a unit on the size scale.
///
/// @arg $x - input value
@function size-scale($x) {
    @if $x == 0 or $x == '0' {
        @return 0;
    } @else if type-of($x) == string {
        @if str-starts-with($x, '-') {
            @return - size-scale(str-slice($x, 2, length($x)));
        } @else if str-ends-with($x, 'p') {
            $x: str-slice($x, 1, str-length($x) - 1);
            $number: to-number($x);
            @return (size-scale($number) + size-scale($number + 1)) / 2;
        } @else if not contains($_DIGITS, str-slice($x, 1, 1)) {
            @return $x;
        } @else {
            @return size-scale(to-number($x));
        }
    } @else if type-of($x) == number {
        @if unit($x) == '' {
            @return sign($x) * pow(2, abs($x) - 3) * config('typography.lead') * 1rem;
        }
    }
    @return $x;
}

/// Convert number to sizing by multiplying it by lead * 1rem
@function size($x) {
    @if type-of($x) == number and unit($x) == '' {
        @return $x * 1rem * config('typography.lead');
    }
    @return $x;
}

/// Return a map with sizing values for the given property.
@function sizing($property, $value) {
    @if type-of($value) == number or type-of($value) == string {
        @return ($property: size($value));
    } @else if type-of($value) == list {
        @return ($property: list-apply($value, size));
    } @else if type-of($value) == map {
        @return map-apply-values(map-filter-values((
            #{$property}-left: map-get-first($value, L(left, l, x, horizontal, all)),
            #{$property}-right: map-get-first($value, L(right, r, x, horizontal, all)),
            #{$property}-top: map-get-first($value, L(top, t, y, vertical, all)),
            #{$property}-bottom: map-get-first($value, L(bottom, b, y, vertical, all)),
        ), not-null), size);
    } @else {
        @return ($property: $value);
    }
}

@function sizing-scale($property, $value) {
    @if type-of($value) == number or type-of($value) == string {
        @return ($property: size-scale($value));
    } @else if type-of($value) == list {
        @return ($property: list-apply($value, size));
    } @else if type-of($value) == map {
        @return map-apply-values(map-filter-values((
            #{$property}-left: map-get-first($value, left l x horizontal all, null),
            #{$property}-right: map-get-first($value, right r x horizontal all, null),
            #{$property}-top: map-get-first($value, top t y vertical all, null),
            #{$property}-bottom: map-get-first($value, bottom b y vertical all, null),
        ), not-null), size-scale);
    } @else {
        @return ($property: $value);
    }
}

