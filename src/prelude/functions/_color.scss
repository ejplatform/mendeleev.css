////////////////////////////////////////////////////////////////////////////////
/// COLOR TRANSFORMATIONS AND UTILITIES
/// @group Color
/// @author Fábio Macêdo Mendes
////////////////////////////////////////////////////////////////////////////////

$contrast-color-white: white !default;
$contrast-color-black: black !default;
$mendeleev-colors: $fn-empty-map !default;
$mendeleev-color-contrast: $fn-empty-map !default;
$mendeleev-color-variants: $fn-empty-map !default;

/// Return named color or a default value if color is not registered
///
/// @arg $name - Color name or color value
/// @arg $variant - Chosen variant. Can also be the string 'contrast'.
/// @arg $alpha - Apply alpha adjustment to color, if given.
/// @arg $default - If given, uses this value if color name is not found in the
///                 palette dictionary.
@function color($name, $variant: null, $alpha: null, $default: null) {
    $result: $name;
    @if $name == null {
        @return null;
    }
    @if type-of($name) == string {
        $result: map-read($mendeleev-colors, $name, $default);
    }

    // Make transformations
    @if $variant == contrast {
        $contrast: map-get($mendeleev-color-contrast, $result);
        @if $contrast == null {
            //noinspection CssInvalidFunction
            $contrast: choose-contrast-color($result, $bias: config('color.contrast-bias'));
        }
        $result: $contrast;
    } @else if $variant != null {
        @error 'Error', $variant, $name, $result;
    }
    @if $alpha != null {
        $result: change-color($result, $alpha: $alpha);
    }

    // Return result
    @return $result;
}

