////////////////////////////////////////////////////////////////////////////////
/// TYPOGRAPHY
/// @group Typography
/// @author Fábio Macêdo Mendes
////////////////////////////////////////////////////////////////////////////////

$mendeleev-type-scales: (
    minor-second: 16/15,
    major-second: 9/8,
    minor-third: 6/5,
    major-third: 5/4,
    perfect-fourth: 4/3,
    augmented-fourth: sqrt(2),
    perfect-fifth: 3/2,
    golden-ratio: (1 + sqrt(5)) / 2,
);
$mendeleev-type-scale: () !default;

/// Return a type scale mapping from the argument.
///
/// If argument is a number provides a ratio-based scale.
/// If argument is a list, convert to a map with the progression:
/// ('1': first, '2': second, '3': third, ...etc)
/// Argument can be one of the pre-defined type scales: very-narrow, narrow, medium, wide, very-wide.
@function type-scale($scale) {
    @if type-of($scale) == number {
        @if $scale < 1 {
            @error 'Progression in type scale must be a number larger than 1';
        }
        $headings: exponential-progression($scale, 5, $reverse: true);
        $raw: join(lst-to-array($headings), 0.875 0.75 0.625);
        $scale: ();
        @for $i from 1 through length($raw) {
            $n: nth($raw, $i);
            $scale: map-merge($scale, (inspect($i): round($n * 16) / 16));
        }
        @return type-scale($scale);
    } @else if type-of($scale) == list {
        $result: ();
        $key: null;
        @for $i from 1 through length($scale) {
            $key: quote(inspect($i));
            $result: map-merge($result, ($key: nth($scale, $i)))
        }
        @return $result;
    } @else if type-of($scale) == map {
        @if not map-has-keys($scale, ('1', '2', '3', '4', '5', '6')) {
            @error 'Map must show progression from 1, 3, up to at least 6';
        }
        @return $scale;
    } @else if map-has-key($mendeleev-type-scales, $scale) {
        @return type-scale(map-get($mendeleev-type-scales, $scale));
    } @else {
        @error 'Wrong argument for get-type-scale: #{$scale}';
    }
}

/// Return a font property like family, line-height, letter-spacing, size,
/// transform, or weight.
///
/// @arg $prop - Property name
/// @arg $which - If given, must be either headings or paragraph and denotes
///               which section to look for the property
@function font-property($prop, $which: paragraph) {
    $conf: config('typography', $which);
    @if map-has-key($conf, $prop) {
        @return map-get($conf, $prop);
    }
    @return config('typography.#{$prop}');
}

//------------------------------------------------------------------------------
// MIXINS
//------------------------------------------------------------------------------

@mixin _heading-vertical-rhythm($ratio) {
    $lead: config('typography.lead');
    $h-lead: config('typography.heading-lead');
    $descender: 0.1;
    $margin-bottom: 0.5 * (1.2 - $ratio * $descender);
    $height-units: $margin-bottom + $ratio * $h-lead / $lead;
    $delta: ceil($height-units) - $height-units;
    font-size: $ratio * 1rem;
    line-height: $h-lead;
    margin: ($lead * (1 + $delta) * 1rem) 0 ($lead * $margin-bottom * 1rem) 0;
}

@mixin headings-type-scale($factor) {
    $scale: map-remove(type-scale($factor), '5', '6', '7', '8');
    @each $n, $ratio in $scale {
        $selector: unquote('h#{$n}, .h#{$n}');
        #{$selector} {
            @include _heading-vertical-rhythm($ratio);
        }
    }
    h5, .h5 {
        font-size: 1rem;
        line-height: $mendeleev-lead;
        margin: ($mendeleev-lead * 1.5rem) 0 ($mendeleev-lead * 0.5rem) 0;
    }
    h6, .h6 {
        font-size: 0.875rem;
        line-height: 1.142857143 * $mendeleev-lead;
        margin: ($mendeleev-lead * 1.5rem) 0 ($mendeleev-lead * 0.5rem) 0;
    }
}

//------------------------------------------------------------------------------
// CONFIGURATIONS
//------------------------------------------------------------------------------

$mendeleev-typography-config: false !default;
@if not $mendeleev-typography-config {

    // Compute type scales
    $type-scales: ();
    @each $bp, $factor in config('typography.scale') {
        $type-scales: map-merge($type-scales, ($factor: type-scale($factor)));
    }

    // Create the responsive type scale
    $scale: ();
    @each $n in ('1', '2', '3', '4', '5', '6', '7', '8') {

        $data: ();
        @each $bp, $factor in config('typography.scale') {
            $type-scale: map-get($type-scales, $factor);
            $size: map-get($type-scale, $n) * 1rem;

            @if $bp == 'start' {
                $data: map-merge($data, (font-size: $size));
            } @else {
                $bp: config('breakpoints.#{$bp}');
                $media: '@media' (min-width: $bp);
                $data: map-merge($data, ($media: (font-size: $size)));
            }
        }
        $scale: map-merge($scale, ('&#{$n}': $data));
    }
    //@error $scale;
    $mendeleev-type-scale: $scale !global;
    $mendeleev-typography-config: true !global;
}

//@error $mendeleev-type-scale;
