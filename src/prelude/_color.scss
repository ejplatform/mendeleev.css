////////////////////////////////////////////////////////////////////////////////
/// COLOR TRANSFORMATIONS AND UTILITIES
/// @group Color
/// @author Fábio Macêdo Mendes
////////////////////////////////////////////////////////////////////////////////

$mendeleev-colors: $fn-empty-map !default;
$mendeleev-color-contrast: $fn-empty-map !default;
$mendeleev-color-variants: $fn-empty-map !default;

/// Return named color or a default value if color is not registered
///
/// @arg $name - Color name or color value
/// @arg $variant - Chosen variant. Can also be the string 'contrast'.
/// @arg $alpha - Apply alpha adjustment to color, if given.
/// @arg $default - If given, uses this value if color name is not found in the
///                 palette dictionary.
@function color($name, $variant: null, $alpha: null, $default: null) {
    $result: $name;
    @if $name == null {
        @return null;
    }
    @if type-of($name) == string {
        $result: map-read($mendeleev-colors, $name, $default);
    }

    // Make transformations
    @if $variant == contrast {
        $contrast: map-get($mendeleev-color-contrast, $result);
        @if $contrast == null {
            //noinspection CssInvalidFunction
            $contrast: choose-contrast-color($result, $bias: config('color.contrast-bias'));
        }
        $result: $contrast;
    } @else if $variant != null {
        @error 'Error', $variant, $name, $result;
    }
    @if $alpha != null {
        $result: change-color($result, $alpha: $alpha);
    }

    // Return result
    @return $result;
}

//------------------------------------------------------------------------------
// MIXINS
//------------------------------------------------------------------------------

/// Define the color and background-color properties.
/// If called with a single argument, treats the color as a color name and
/// assign it to the background and the contrast color to the foreground.
@mixin color($color, $border: false, $flip: false) {
    $bg: color(nth($color, 1));
    $fg: if(type-of($color) == list, nth($color, 2), null);
    $fg: if($fg, color($fg), color($bg, contrast));
    @if $flip {
        $aux: $bg;
        $bg: $fg;
        $fg: $aux;
    }
    $declarations: (color: $fg, background-color: $bg);

    // Add border color
    @if $border == foreground or $border == fg {
        $result: map-merge($declarations, (border-color: $fg));
    } @else if $border == background or $border == bg or $border {
        $result: map-merge($result, (border-color: $bg));
    }

    // Set properties
    @include from-map($declarations);
}


$fn-contrast-color-white: color('text-inverse');
$fn-contrast-color-black: color('text');
