////////////////////////////////////////////////////////////////////////////////
/// COLOR TRANSFORMATIONS AND UTILITIES
/// @group Color
/// @author Fábio Macêdo Mendes
////////////////////////////////////////////////////////////////////////////////

// Configuration options
$mendeleev-color-bias: config('color.contrast-bias') !default;
$mendeleev-color-roles: $fn-empty-map !default;
$mendeleev-variant-levels: map-keys(config('color.variants.levels')) !default;

// Fetch dark and light contrast mixes to create contrast variants
$mendeleev-variant-light-contrast: config('color.variants.contrast.light') !default;
$mendeleev-variant-dark-contrast: config('color.variants.contrast.dark') !default;

/// Return named color or a default value if color is not registered
///
/// @arg $name - Color name or color value
/// @arg $variant - Chosen variant. Can also be the string 'contrast'.
/// @arg $alpha - Apply alpha adjustment to color, if given.
/// @arg $default - If given, uses this value if color name is not found in the
///                 palette dictionary.
@function color($name, $variant: null, $alpha: null, $default: null) {
    $result: $name;
    @if $name == null {
        @return null;
    }
    @if type-of($name) == string {
        $result: map-read($mendeleev-color-palette, $name, $default);
    }

    // Make transformations
    @if $variant == contrast {
        $contrast: map-get($mendeleev-color-contrast, $result);
        @if $contrast == null {
            $contrast: choose-contrast-color($result, $bias: $mendeleev-color-bias);
        }
        $result: $contrast;
    } @else if $variant != null {
        @error 'Invalid variant for color #{$name}: #{$variant}';
    }
    @if $alpha != null {
        $result: change-color($result, $alpha: $alpha);
    }

    // Return result
    @return $result;
}

/// Return a named variant for the given color.
@function color-variant($color, $variant) {
    @if not $color {
        @return null;
    }
    $value: if(type-of($color) == string, map-get($mendeleev-color-palette, $color), $color);
    @if not $value {
        @error 'Color does not exist: #{inspect($color)}';
    }

    // Raw variant call: passing a tuple of (color-name, mix)
    @if type-of($variant) == list {
        $other: color(nth($variant, 1));
        $mix: nth($variant, 2);
        @return mix($other, $value, $mix);
    }

    // Fetch configuration
    $cfg: map-get($mendeleev-variant-levels, $variant);
    @if not $cfg {
        @error 'Invalid variant: #{$variant}';
    }

    // Try color from cache
    $res: map-get($mendeleev-color-palette, '#{$color}-#{$variant}');
    @if $res {
        @return $res;
    }

    // Compute variation
    $variant-color: color-variant($value, $cfg);

    // Compute contrast and save in dictionary
    $light: color-variant($value, $mendeleev-variant-light-contrast);
    $dark: color-variant($value, $mendeleev-variant-dark-contrast);
    $contrast: choose-contrast-color($variant, $light, $dark, $mendeleev-color-bias);
    $mendeleev-color-contrast: map-merge((
        $variant-color: $contrast,
        $contrast: $variant-color,
    ), $mendeleev-color_contrast) !global;

    @return $variant-color;
}


//------------------------------------------------------------------------------
// MIXINS
//------------------------------------------------------------------------------

/// Define the color and background-color properties.
/// If called with a single argument, treats the color as a color name and
/// assign it to the background and the contrast color to the foreground.
@mixin color($color, $border: false, $flip: false) {
    $bg: color(nth($color, 1));
    $fg: if(type-of($color) == list, nth($color, 2), null);
    $fg: if($fg, color($fg), color($bg, contrast));
    @if $flip {
        $aux: $bg;
        $bg: $fg;
        $fg: $aux;
    }
    $res: (color: $fg, background-color: $bg);

    // Add border color
    @if $border == foreground or $border == fg {
        $res: map-merge($res, (border-color: $fg));
    } @else if $border == background or $border == bg or $border {
        $res: map-merge($res, (border-color: $bg));
    }

    // Set properties
    @include from-map($res);
}

//------------------------------------------------------------------------------
// CONFIGURATIONS
//------------------------------------------------------------------------------

$mendeleev-color-config: false !default;
@if not $mendeleev-color-config {
    $variant-levels: config('color.variants.levels');
    $bias: $mendeleev-color-bias;

    /// Dictionary that stores all named colors with their respective values
    $mendeleev-color-palette: map-merge($mendeleev-color-palette, config('palette', $fn-empty-map));

    /// Dictionary mapping color values to their respective contrasts
    $mendeleev-color-contrast: map-merge($mendeleev-color-contrast, config('contrast', $fn-empty-map));

    // Create a list with all contrasts from named colors.
    $acc: ();
    @each $color, $value in $mendeleev-color-palette {
        @if not map-get($mendeleev-color-contrast, $value) {
            $light: color-variant($value, $mendeleev-variant-light-contrast);
            $dark: color-variant($value, $mendeleev-variant-dark-contrast);
            $contrast: choose-contrast-color($value, $light, $dark, $bias);
            $acc: map-merge(($value: $contrast, $contrast: $value), $acc);
        }
    }
    $mendeleev-color-contrast: map-merge($acc, $mendeleev-color-contrast) !global;

    // Create a list of color roles used to derive the color classes.
    // When creating that list, also save all variant colors in the default
    // color dictionary.
    $roles: config('color.roles');

    @each $color in config('color.variants.colors') {
        // Save main color
        @if not contains($roles, $color) {
            $roles: append($roles, $color);
        }
        $value: map-get($mendeleev-color-palette, $color);

        // Compute contrasts
        $light: color-variant($value, $mendeleev-variant-light-contrast);
        $dark: color-variant($value, $mendeleev-variant-dark-contrast);
        $acc: ();
        $acc-contrast: ();
        @each $suffix, $cfg in $variant-levels {
            $role: '#{$color}-#{$suffix}';
            $roles: append($roles, $role);
            $variant: color-variant($value, $cfg);
            $contrast: choose-contrast-color($variant, $light, $dark, $bias);
            $acc: map-merge($acc, ($role: $variant));
            $acc-contrast: map-merge($acc-contrast, (
                $variant: $contrast,
                $contrast: $variant,
            ));
        }
        $mendeleev-color-contrast: map-merge($acc-contrast, $mendeleev-color-contrast) !global;
        $mendeleev-color-palette: map-merge($acc, $mendeleev-color-palette) !global;
    }

    // Save configurations
    $mendeleev-color-config: true !global;
    $mendeleev-color-roles: $roles !global;
    $fn-contrast-color-white: color('inverse-text') !global;
    $fn-contrast-color-black: color('regular-text') !global;
}
