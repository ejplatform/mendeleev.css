////////////////////////////////////////////////////////////////////////////////
/// MIXINS THAT HELP CREATING UTILITY CLASSES
/// @group Utilities
/// @author Fábio Macêdo Mendes
////////////////////////////////////////////////////////////////////////////////
@import 'color';
@import 'sizes';

@function mendeleev-make-pair($prop, $func, $value) {
    @return ($prop: call(as-func($func), $value));
}

$mendeleev-make-pair-fn: as-func(mendeleev-make-pair);
$mendeleev-sizing-fn: as-func(sizing);
$mendeleev-sizing-scale-fn: as-func(sizing-scale);
$mendeleev-special-properties: (
    //
    // Sizing
    border-radius:
        ($mendeleev-make-pair-fn, ('border-radius', size)),
    margin:
        ($mendeleev-sizing-fn, (margin,)),
    height:
        ($mendeleev-sizing-fn, (height,)),
    pad:
        ($mendeleev-sizing-fn, (padding,)),
    padding:
        ($mendeleev-sizing-fn, (padding,)),
    width:
        ($mendeleev-sizing-fn, (width,)),
    margin-scale:
        ($mendeleev-sizing-scale-fn, (margin,)),
    height-scale:
        ($mendeleev-sizing-scale-fn, (height,)),
    pad-scale:
        ($mendeleev-sizing-scale-fn, (padding,)),
    padding-scale:
        ($mendeleev-sizing-scale-fn, (padding,)),
    width-scale:
        ($mendeleev-sizing-scale-fn, (width,)),
    //
    // Colors
    color:
        ($mendeleev-make-pair-fn, ('color', 'color')),
    background-color:
        ($mendeleev-make-pair-fn, ('background-color', 'color')),
    border-color:
        ($mendeleev-make-pair-fn, ('border-color', 'color')),
);


/// Include all items on map as pairs of `property: value`.
///
/// Some properties have a special treatment:
///  * padding/pad/width/height/margin:
///        unitless values are converted to sizes, and mappings are expanded
///        into directions.
///  * padding-scale/pad-scale/...:
///        like before, but unitless values are converted to the sizing scale.
///  * color/background-color/border-color:
///        include color by value or name.
@mixin options($map, $suffix: null) {
    @each $key, $value in $map {
        // Handle special properties: sizes
        $special: map-get($mendeleev-special-properties, $key);
        @if $special {
            $func: nth($special, 1);
            $args: append(nth($special, 2), $value);
            @include from-map(call($func, $args...), $suffix);
        } @else if type-of($value) == map {
            #{$key} {
                @include options($value, $suffix);
            }
        } @else {
            @if $value != null {
                #{$key}: $value $suffix;
            }
        }
    }
}


