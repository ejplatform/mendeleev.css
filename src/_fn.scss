// Functions in this package will eventually make their way to fn.sass.
@import '../node_modules/fn.sass/src/fn';

/// Log given $values and return the last argument.
@function log($args...) {
    @warn 'LOG: #{$args}';
    @return nth($args, length($args));
}

@function map-merge-many($maps) {
    @if $maps == null {
        @return map-remove((), null);
    }

    @while cdr($maps) != null {
        $res: null;

        @while $maps != null {
            $map: car($maps);
            $maps: cdr($maps);
            @if $maps != null {
                $map: map-merge(car($maps), $map);
                $maps: cdr($maps);
                @if $maps != null {
                    $map: map-merge(car($maps), $map);
                    $maps: cdr($maps);
                }
            }
            $res: ($map $res);
        }
        $maps: $res;
    }
    @return car($maps);
}

@function lst-to-map($xs) {
    $maps: null;

    @while $xs != null {
        $x: car($xs);
        $xs: cdr($xs);
        $m: (nth($x, 1): nth($x, 2));
        @if $xs != null {
            $x: car($xs);
            $xs: cdr($xs);
            $m: map-merge($m, (nth($x, 1): nth($x, 2)));
            @if $xs != null {
                $x: car($xs);
                $xs: cdr($xs);
                $m: map-merge($m, (nth($x, 1): nth($x, 2)));
                @if $xs != null {
                    $x: car($xs);
                    $xs: cdr($xs);
                    $m: map-merge($m, (nth($x, 1): nth($x, 2)));
                    @if $xs != null {
                        $x: car($xs);
                        $xs: cdr($xs);
                        $m: map-merge($m, (nth($x, 1): nth($x, 2)));
                    }
                }

            }
        }
        $maps: ($m $maps);
    }

    @return map-merge-many($maps);
}

$do: assert-eq(lst-to-map(L(1 2, 3 4, 5 6, 7 8, 9 10)), (1: 2, 3: 4, 5: 6, 7: 8, 9: 10));

/// Create a list of fn($x) for each $x in $xs.
/// Differently from lst-map, this function applies $x **after** the extra
/// arguments.
///
/// Any additional arguments are passed to the function during function
/// application.
///
/// @arg $fn - Function name or handle
/// @arg $xs - List
@function lst-rmap($fn, $xs, $args...) {
    @if length($args) == 0 {
        @return lst-map($fn, $xs);
    }
    $xs: to-lst($xs);
    $ys: null;
    $fn: as-func($fn);
    @while $xs != null {
        $x: nth($xs, 1);
        $xs: nth($xs, 2);
        $args-all: append($args, $x);
        $ys: (call($fn, $args-all...) $ys);
    }
    @return lst-reverse($ys);
}

@mixin var-fallback($defs) {
    @each $prop, $pair in $defs {
        $value: nth($pair, 1);
        $var-name: nth($pair, 2);
        #{$prop}: #{$value};
        #{$prop}: unquote('var(--#{$var-name})');
    }
}
