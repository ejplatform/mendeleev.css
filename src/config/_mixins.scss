/// Include declarations only for the given breakpoint.
///
/// @arg $bp - Breakpoint name (e.g., start, sm, md, lg, etc)
/// @arg $properties - A map of properties
/// @arg $suffix - Optional suffix (e.g., !important);
@mixin breakpoint($bp, $properties: (), $suffix: null) {
    @if $bp == 'start' {
        @content;
        @include options($properties, $suffix: $suffix);
    } @else {
        @media screen and (min-width: config('breakpoints.#{$bp}')) {
            @content;
            @include options($properties, $suffix: $suffix);
        }
    }
}

/// Include all pairs of (key: value) in map as CSS declarations. If value is
/// another map, include nested values.
@mixin from-map($map, $suffix: null) {
    @each $k, $v in $map {
        @if type-of($v) == map {
            @if type-of($k) == list and nth($k, 1) == '@media' {
                @media screen and #{nth($k, 2)} {
                    @include from-map($v, $suffix);
                }
            } @else {
                #{$k} {
                    @include from-map($v, $suffix);
                }
            }
        } @else if $v {
            #{$k}: $v $suffix;
        }
    }
}

/// Include with the given selector and defined by a mapping of property to
/// values.
@mixin simple-utility-declaration($selector, $data, $mode) {
    @if mode == responsive {
        @error 'Not implemented';
    } @else {
        #{$selector} {
            @include from-map($data);
        }
    }
}

/// Like simple-utility-declaration, but receives a mapping of selectors to
/// declarations.
@mixin multiple-utilities-declaration($data, $mode) {
    @each $name, $declarations in $data {
        @include simple-utility-declaration($name, $declarations, $mode);
    }
}

$mendeleev-registered-utilities: false !default;

/// Mixin that includes all registered utilities. This mixin is automatically
/// Executed when the mendeleev utilities module is imported.
///
@mixin mendeleev-register-utilities() {
    @if not $mendeleev-registered-utilities {

        $lst: lst-reverse($mendeleev-css-declarations);

        @while $lst {
            $info: nth($lst, 1);
            $lst: nth($lst, 2);

            $type: map-get($info, type);
            $emit: map-get($info, emit);
            $data: map-get($info, data);

            @if $emit {
                @if $type== multiple {
                    @include multiple-utilities-declaration($data, $mode: $emit);
                } @else if $type == simple {
                    $name: map-get($info, name);
                    @include simple-utility-declaration($name, $data, $mode: $emit);
                } @else {
                    @error 'Invalid type: #{$type}'
                }
            }
        }
    }
    $mendeleev-registered-utilities: true !global;
}

