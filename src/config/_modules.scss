//------------------------------------------------------------------------------
// DECLARE MENDELEEV MODULES
//------------------------------------------------------------------------------

// Default dictionary with Mendeleev state.
$mendeleev-css-declarations: null !default;

/// Declare a Mendeleev module of CSS declarations.
///
/// @arg $cfg - String path for the configuration option in the global
///             Mendeleev config
/// @arg $spec - Dictionary of declarations mapping CSS selector with CSS
///              definitions
@function mendeleev-module($cfg, $spec) {
    $emit: config($cfg);
    $res: null;

    @each $selector, $data in $spec {
        @if type-of($data) == map {
            $info: (name: $selector, data: $data, emit: $emit, type: simple);
            $mendeleev-css-declarations: ($info $mendeleev-css-declarations) !global;
            $res: ($info $res);

        } @else {
            @error "Invalid content for #{$selector}."
        }
    }
    @return $res;
}

/// Declare a Mendeleev module of CSS utilities. A utility is understood as a
/// CSS declaration that defines a single CSS property.
///
/// This function makes it easier to declare lots of classes in batch, but is
/// far less flexible on the kind of declarations that can be made.
///
/// @arg $cfg - String path for the configuration option in the global
///             Mendeleev config
/// @arg $spec - Dictionary of declarations mapping CSS selector with CSS
///              definitions
@function mendeleev-utility-module($cfg, $spec) {
    $emit: config($cfg);
    $res: null;
    @each $prop, $data in $spec {
        $prefix: nth($data, 1);
        $content: nth($data, 2);

        @if type-of($content) == map {
            $data: ();
            @each $suffix, $value in $content {
                $name: $prefix + $suffix;
                $data: map-merge($data, ($name: (#{$prop}: $value)));
            }
            $info: (prefix: $prefix, data: $data, type: multiple, emit: $emit);
            $res: ($info $res);
            $mendeleev-css-declarations: ($info $mendeleev-css-declarations) !global;
        } @else {
            @error "Invalid specification for #{$prop}."
        }
    }
    @return $res;
}

/// Declares a complete scale of values.
///
/// @arg $scale - A map or list of 2-tuples from names to values.
/// @arg $css - A map of (prop: value) pairs. If value is null, it is replaced
///             by each value in the given scale.
/// @arg $interpolate - Like $css, but each value is treated as an interpolation
///                     string in which all occurrences of $1 are replace by
///                     the value given by the scale.
@function scale-of($scale, $css: (), $interpolate: null, $prefix: '&') {
    $map: $fn-empty-map;
    $css-template: $css;
    @each $k, $v in $scale {
        $css: $fn-empty-map;

        @each $prop, $value in $css-template {
            $css: map-merge($css, ($prop: $value or $v));
        }

        @if $interpolate {
            @each $prop, $value in $interpolate {
                $value: unquote(str-replace($value, '$1', $v));
                $css: map-merge($css, ($prop: $value));
            }
        }

        $map: map-merge($map, ('#{$prefix}#{$k}': $css));
    }
    @return $map;
}
