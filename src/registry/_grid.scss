//------------------------------------------------------------------------------
// CSS GRID
//------------------------------------------------------------------------------
@import '../preflight';

$mendeleev-grid-scale: L(1, 2, 3, 4, 5, 6, 8, 9, 10, 12, 15) !default;
$mendeleev-grid-gap-scale: L(1 size-scale(1), 2 size-scale(2), 3 size-scale(3), 4 size-scale(4)) !default;
$mendeleev-grid-span-data: (
    1: auto / span 1,
    2: auto / span 2,
    3: auto / span 3,
    4: auto / span 4,
    5: auto / span 5,
    6: auto / span 6,
    7: auto / span 7,
    8: auto / span 8,
    9: auto / span 9,
    10: auto / span 10,
    11: auto / span 11,
    12: auto / span 12,
    13: auto / span 13,
    14: auto / span 14,
    15: auto / span 15,
);

// REGULAR CSS GRID
$do: mendeleev-module(
        'grid', (
        // Basic definitions
        '.grid-dense': (
            grid-auto-flow: dense
        ),
        // Templates
        '.grid-$1': scale-of(
            $scale: $mendeleev-grid-scale,
            $css: (
                '--grid-gap': 0,
                '--grid-size': '$1',
                display: grid,
                grid-template-columns: 'repeat($1, 1fr)',
            )
        ),
        // Row templates
        '.rows-$1': scale-of(
            $scale: $mendeleev-grid-scale,
            $css: (
                '--grid-gap': 0,
                '--grid-size': '$1',
                display: grid,
                grid-template-rows: 'repeat($1, 1fr)',
            )
        ),
        //
        // Gap between cells
        '.gap-$1': scale-of(
            $scale: $mendeleev-grid-gap-scale,
            $css: (
                '--grid-gap': '$1',
                'grid-gap': '$1',
                'gap': '$1',
            )
        )
    ));

$do: mendeleev-utility-module(
        'grid', (
        display:
            ('.', (
                grid: grid,
            )),
        grid-auto-flow:
            ('.grid-', (
                dense: dense,
            )),
        //
        // Global cell placement
        place-items:
            ('.place-', (
                center: center,
                stretch: stretch,
            )),
        justify-items:
            ('.place-', (
                right: right,
                left: left,
                start: start,
                end: end,
                center-x: center,
                stretch-x: stretch,
            )),
        align-items:
            ('.place-', (
                top: start,
                bottom: end,
                center-y: center,
                center: center,
                stretch-y: stretch,
                stretch: stretch
            )),
        //
        // Grid alignment on its container
        place-content:
            ('.grid-', (
                center: center,
                stretch: stretch,
                around: space-around,
                between: space-between,
                evenly: space-evenly,
            )),
        justify-content:
            ('.grid-', (
                right: right,
                left: left,
                start: start,
                end: end,
                center-x: center,
                stretch-x: stretch,
                around-x: space-around,
                between-x: space-between,
                evenly-x: space-evenly,
            )),
        align-content:
            ('.grid-', (
                top: start,
                bottom: end,
                center-y: center,
                stretch-y: stretch,
                around-y: space-around,
                between-y: space-between,
                evenly-y: space-evenly,
            )),
        //
        // Individual cell alignment
        place-self:
            ('.cell-', (
                center: center,
                stretch: stretch,
            )),
        justify-self:
            ('.cell-', (
                right: right,
                left: left,
                start: start,
                end: end,
                center-x: center,
                stretch-x: stretch,
            )),
        align-self:
            ('.cell-', (
                top: start,
                bottom: end,
                center-y: center,
                stretch-y: stretch,
            )),
        //
        // Individual cell positioning and span
        grid-column-start:
            ('.at-col-', (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)),
        grid-row-start:
            ('.at-row-', (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)),
        grid-column:
            ('.col-span', $mendeleev-grid-span-data),
        grid-row:
            ('.row-span', $mendeleev-grid-span-data),
    ));

//------------------------------------------------------------------------------
// HARD GRID
//------------------------------------------------------------------------------

@function _mendeleev-hard-grid($n) {
    @return ($n, L($n, 100% / $n, ($n - 1) / $n));
}

$mendeleev-hard-grid-scale: lst-map(_mendeleev-hard-grid, $mendeleev-grid-scale) !default;

$do: mendeleev-module(
        'hard-grid', (
        // Basic definitions
        '.hard-grid': (
            display: grid,
        ),
        // Templates
        '.hard-grid-$1': scale-of(
            $scale: $mendeleev-grid-scale,
            $css: (
                '--grid-gap': 0,
                '--grid-size': '$1',
                display: grid,
                grid-template-columns: 'repeat($1, calc($2 - $3 * var(--grid-gap)))',
            )
        ),
        // Row templates
        '.hard-rows-$1': scale-of(
            $scale: $mendeleev-grid-scale,
            $css: (
                '--grid-gap': 0,
                '--grid-size': '$1',
                display: grid,
                grid-template-rows: 'repeat($1, calc($2 - $3 * var(--grid-gap)))',
            )
        ),
    ));
