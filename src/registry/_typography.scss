//------------------------------------------------------------------------------
// TYPOGRAPHY
//------------------------------------------------------------------------------
@import 'typography-functions';

//$_emit: config('typography.scale');
//$do: make-type-scale($_emit);

//------------------------------------------------------------------------------
// Simple system font styles: font-sans, font-serif, font-mono, font-cursive

@function mendeleev-utility-module($cfg, $spec) {
    $emit: config($cfg);
    $res: null;

    @each $prop, $data in $spec {
        $prefix: nth($data, 1);
        $content: nth($data, 2);

        @if type-of($content) == map {
            @each $suffix, $value in $content {
                $name: '#{$prefix}#{$suffix}';
                $data: (#{$prop}: $value);
                $res: cons(register-utility($name, $data, $emit), $res);
            }
        } @else {
            @error "Invalid content"
        }
    }
    @return $res;
}

$do: mendeleev-utility-module(
        'typography.modules.fonts', (
        font-family:
            ('.', (
                sans-serif: config('typography.#{sans-serif}'),
                serif: config('typography.#{serif}'),
                cursive: config('typography.#{cursive}'),
                monospace: config('typography.#{monospace}'),
            )),
    )
);

//------------------------------------------------------------------------------
// Font weight

$do: mendeleev-utility-module(
        'typography.modules.weights', (
        font-weight:
            ('.', (
                thin: 100,
                extra-light: 200,
                light: 300,
                regular: 400,
                medium: 500,
                semi-bold: 600,
                bold: 700,
                extra-bold: 800,
                black: 900,
            )),
    ));

//------------------------------------------------------------------------------
// Styles, decorations and text transform

$do: mendeleev-utility-module(
        'typography.modules.styles', (
        font-style:
            ('.', (
                italic: italic,
                roman: norma
            )),
        text-transform:
            ('.', (
                uppercase: uppercase,
                lowercase: lowercase,
                capitalize: capitalize,
                normalcase: none,
            )),
        text-decoration:
            ('.', (
                underline: underline,
                line-through: line-through,
                no-underline: none
            ))
    ));

//------------------------------------------------------------------------------
// Text alignment

$_emit: config('typography.alignment');
@each $value in (left center right justify) {
    $do: register-utility('.text-#{$value}', (text-align: $value), $emit: $_emit);
}

@each $value in (baseline top middle bottom text-top text-bottom) {
    $do: register-utility('.align-#{$value}', (vertical-align: $value), $emit: $_emit);
}

//------------------------------------------------------------------------------
// Whitespace
$_emit: config('typography.white-space');
@each $value in (normal nowrap pre pre-line pre-wrap) {
    $do: register-utility('.white-space-#{$value}', (white-space: $value), $emit: $_emit);
}

//------------------------------------------------------------------------------
// Leading

$_emit: config('typography.leading');
@each $name, $value in (
    leading: config('typography.lead'),
    leading-title: config('typography.heading-lead'),
    leading-solid: 1,
    leading-loose: 2,
) {
    $do: register-utility('.#{$name}', (line-height: $value), $emit: $_emit);
}

//------------------------------------------------------------------------------
// Measure

$_emit: config('typography.measure');
@each $name, $value in (
    measure: 29em, // ~ 65 characters
    measure-wide: 38em, // ~ 85 characters
    measure-narrow: 20em, // ~ 45 characters
) {
    $do: register-utility('.#{$name}', (max-width: $value), $emit: $_emit);
}

//------------------------------------------------------------------------------
// Indentation

$_emit: config('typography.indent');
@each $name, $value in (
    indent: 1.5em,
    indent-punctuation: -0.3em,
) {
    $do: register-utility('.#{$name}', (text-indent: $value), $emit: $_emit);
}

$do: register-utility('.truncate', (white-space: nowrap, overflow: hidden, text-overflow: ellipsis), $emit: $_emit);

//------------------------------------------------------------------------------
// Direction

$_emit: config('typography.modules.direction');
$do: register-utilities('.direction', (rtl, ltr), '.', $emit: $_emit);

